{"version":3,"sources":["components/Carousel.js","components/Room.js","components/Item.js","components/Bundle.js","Main.js","index.js"],"names":["Carousel","props","state","positionX","index","mainRef","React","createRef","sliderRef","dragStart","bind","dragging","dragStop","onWheel","onOut","prevProps","this","resetPosition","currentRoom","setIndex","event","current","style","transition","cursor","pageX","touches","setState","isMousePressed","initialX","currentX","pageY","elementBox","getBoundingClientRect","bottom","top","right","left","changedTouches","distance","elementSize","offsetWidth","Math","abs","newIndex","sign","deltaY","childrenCount","children","length","undefined","updateState","ref","className","onMouseDown","onMouseMove","onMouseUp","onMouseOut","onTouchStart","onTouchMove","onTouchEnd","transform","Component","Room","isComplete","completedCount","room","name","reward","bundles","progressPercentage","ceil","completedClass","width","connect","ownProps","bundlesCompleted","forEach","element","bundle","items","itemReducer","id","itemCount","isBundleComplete","status","dispatch","Item","checked","active","item","info","itemClass","replace","buildClassName","fadedClass","onClick","toggleItem","type","payload","Bundle","idArray","push","toggleAll","allCompleted","stopPropagation","rewardElement","preventScroll","map","key","completeCount","options","Main","changeRoom","roomsElement","bundlesElement","rooms","roomsData","sortBy","wrapperReducer","initialState","defaultState","serializedState","localStorage","getItem","JSON","parse","err","loadData","store","createStore","combineReducers","action","subscribe","throttle","stringify","setItem","saveData","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13f400ff.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport '../css/carousel.css';\n\nexport class Carousel extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            positionX: 0,\n            index: 0\n        }\n\n        this.mainRef = React.createRef();\n        this.sliderRef = React.createRef();\n\n        this.dragStart = this.dragStart.bind(this);\n        this.dragging = this.dragging.bind(this);\n        this.dragStop = this.dragStop.bind(this);\n        this.onWheel = this.onWheel.bind(this);\n        this.onOut = this.onOut.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        this.resetPosition(prevProps)\n    }\n\n    UNSAFE_componentWillUpdate(prevProps) {\n        this.resetPosition(prevProps)\n    }\n\n    resetPosition(prevProps) {\n        const { currentRoom } = this.props;\n\n        if (currentRoom && (currentRoom !== prevProps.currentRoom)) {\n            this.setIndex(0);\n        }\n    }\n\n    dragStart(event) {\n        this.sliderRef.current.style.transition = \"\";\n        this.sliderRef.current.style.cursor = \"grabbing\";\n\n        const { pageX } = (event.touches && event.touches[0]) || event;\n        this.setState({\n            isMousePressed: true,\n            initialX: pageX,\n            currentX: pageX\n        })\n    }\n\n    dragging(event) {\n        const { pageX } = (event.touches && event.touches[0]) || event;\n        if (this.state.isMousePressed) {\n            this.setState({\n                currentX: pageX,\n                positionX: this.state.positionX + (pageX - this.state.currentX)\n            })\n        }\n    }\n\n    onOut(event) {\n        if (this.state.isMousePressed) {\n            const { pageX, pageY } = event;\n\n            let elementBox = this.mainRef.current.getBoundingClientRect();\n            const { bottom, top, right, left } = elementBox;\n\n            if (pageY >= bottom || pageY <= top || pageX >= right || pageX <= left) {\n                this.dragStop(event);\n            }\n        }\n    }\n\n    dragStop(event) {\n        this.sliderRef.current.style.cursor = \"\";\n\n        this.setState({\n            isMousePressed: false\n        })\n\n        const { pageX } = (event.changedTouches && event.changedTouches[0]) || event;\n        let distance = this.state.initialX - pageX;\n        let elementSize = this.mainRef.current.offsetWidth;\n\n        /* pushy enough */\n        if (Math.abs(distance) > 120) {\n            let newIndex = this.state.index + ((Math.sign(distance)));\n\n            this.setIndex(newIndex);\n        } else {\n            this.sliderRef.current.style.transition = \"transform 0.2s ease-out\"\n            this.setState({ positionX: elementSize * this.state.index * - 1 });\n        }\n    }\n\n    onWheel(event) {\n        const { deltaY } = event;\n\n        let newIndex;\n        if (deltaY > 0) {\n            newIndex = this.state.index + 1;\n        } else {\n            newIndex = this.state.index - 1;\n        }\n\n        this.setIndex(newIndex);\n    }\n\n    setIndex(newIndex) {\n        let childrenCount = this.props.children.length || 1;\n        let elementSize = this.mainRef.current.offsetWidth;\n\n        this.sliderRef.current.style.transition = \"transform 0.2s ease-out\"\n\n        if (newIndex >= 0 && newIndex < childrenCount) {\n            this.setState({\n                index: newIndex,\n                positionX: elementSize * newIndex * - 1,\n                initialX: undefined\n            });\n\n            if (this.props.updateState) {\n                this.props.updateState(newIndex);\n            }\n\n        } else {\n            this.setState({\n                positionX: elementSize * this.state.index * - 1,\n                initialX: undefined\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div ref={this.mainRef} className=\"carousel-wrapper\"\n\n                onMouseDown={this.dragStart}\n                onMouseMove={this.dragging}\n                onMouseUp={this.dragStop}\n                onWheel={this.onWheel}\n                onMouseOut={this.onOut}\n\n                onTouchStart={this.dragStart}\n                onTouchMove={this.dragging}\n                onTouchEnd={this.dragStop}\n            >\n\n                <div ref={this.sliderRef} className=\"item-wrapper\" style={{ transform: `translateX(${this.state.positionX}px)` }}>\n                    {this.props.children}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Carousel\n","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\n\nimport '../css/room.css';\n\nexport class Room extends Component {\n    render() {\n        const { isComplete, completedCount } = this.props;\n        const { name, reward, bundles } = this.props.room;\n        \n        let progressPercentage = Math.ceil(completedCount/bundles.length * 100);\n\n        let completedClass = '';\n        if(isComplete) {\n            completedClass = 'animated shake';\n        }\n        \n        return (            \n            <div className=\"room-item material\">\n                <div className=\"room-progress\">\n                    <div className=\"progress-text\">\n                        <p className=\"room-name\">{name}</p>\n                        <span className=\"room-count\">{completedCount}/{bundles.length}</span>\n                    </div>\n                    <div className={`progress-bar material ${completedClass}`}>\n                        <div className=\"cursor\" style={{ width: `${progressPercentage}%` }}></div>\n                    </div>\n                </div>\n\n                <div className=\"room-reward-wrapper\">\n                    <span className=\"room-reward-name\">{reward}</span>\n                    <div className=\"sprite bg-Bundle_Reward\"></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\n    let bundlesCompleted = 0;\n    ownProps.room.bundles.forEach(element => {\n        if (isBundleComplete(element, state)) {\n            bundlesCompleted++;\n        }\n    });\n\n    let status = false;\n    if (bundlesCompleted === ownProps.room.bundles.length) {\n        status = true;\n    }\n\n    return {\n        isComplete: status,\n        completedCount: bundlesCompleted\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        /* toggleAll: (options) => {\n            dispatch({\n                type: \"TOGGLE_ALL\",\n                payload: options\n            });\n        } */\n    };\n};\n\nfunction isBundleComplete(bundle, state) {\n\n    let completedCount = 0;\n    bundle.items.forEach(element => {\n        if (state.itemReducer[element.id]) {\n            completedCount++;\n        }\n    });\n\n\n    if (completedCount >= bundle.itemCount) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Room);","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\n\nimport '../css/item.css';\nimport '../css/spritesheet.css';\n\nexport class Item extends Component {\n    constructor(props) {\n        super(props);\n\n        let checked = false;\n        if(this.props.active) {\n            checked = true;\n        }\n\n        this.state = {\n            active: checked\n        }\n    }\n\n    render() {\n        const { name, itemCount, info, id } = this.props.item;\n\n        let itemClass = buildClassName(name);\n\n        let infoElement;\n        if (info) {\n            infoElement = <div className=\"info smooth\">{info}</div>;\n        }\n\n        let completedClass = '';\n        let fadedClass = '';\n        if(this.props.active) {\n            completedClass = ' checked animated rubberBand';\n            fadedClass = 'faded';\n        }\n\n        return (\n            <div className=\"item\">\n                <div className={`item-name-wrapper ${fadedClass}`}>\n                    <div className={`sprite ${itemClass}`}></div>\n                    <div className=\"item-info\">\n                        <span className=\"item-name\">{name}</span>\n                        <span className=\"item-count\">{`(${itemCount}x)`}</span>\n                    </div>\n                </div>\n                <div className={`checkbox ${completedClass}`} onClick={() => this.props.toggleItem(id)}>\n                    <span className=\"checkmark\"></span>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\n    return {\n        active: state.itemReducer[ownProps.item.id]\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleItem: (id) => {\n            dispatch({\n                type: \"TOGGLE_ITEM\",\n                payload: id\n            });\n        }\n    };\n};\n\nfunction buildClassName(name) {\n    name = name.replace(/'/g, \"\");\n    name = name.replace(/,/g, \"\");\n    name = name.replace(/ /g, \"_\");\n\n    return `bg-${name}`;\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);","import React, { Component } from 'react'\nimport Item from './Item';\nimport { connect } from \"react-redux\";\n\nimport '../css/bundle.css';\nimport '../css/bundleIcons.css';\n\nexport class Bundle extends Component {\n\n    toggleAll() {\n\n        const { bundle, completedCount } = this.props;\n\n        let idArray = [];\n\n        bundle.items.forEach(element => {\n            idArray.push(element.id);\n        });\n\n        if (bundle.items.length === completedCount) {\n            this.props.toggleAll({ idArray, allCompleted: true });\n        } else {\n            this.props.toggleAll({ idArray, allCompleted: false });\n        }\n\n    }\n\n    preventScroll(event) {\n        event.stopPropagation();\n    }\n\n    render() {\n        const { name, reward, items, itemCount } = this.props.bundle;\n        const { completedCount } = this.props;\n\n        let progressPercentage = Math.ceil(completedCount / itemCount * 100);\n\n        let completedClass = '';\n        if(progressPercentage == 100) {\n            completedClass = 'animated shake';\n        }\n\n        let rewardElement;\n        if (reward) {\n            rewardElement =\n                <div className=\"bundle-reward-wrapper\">\n                    <span className=\"bundle-reward\">\n                        <div className={`sprite ${buildClassName(reward.name)}`}></div>\n                        <div className=\"reward-text-wrapper\">\n                            <span className=\"bundle-reward-text\">{reward.name}</span>\n                            <span className=\"reward-count\">({reward.itemCount}x)</span>\n                        </div>\n                    </span>\n                    <div className=\"sprite bg-Bundle_Reward\"></div>\n                </div>\n        }\n\n        return (\n            <div className=\"bundle-item material\">\n\n                <div className=\"bundle-info\">\n                    <div className={`bundle-icon ${buildClassName(name)}`}></div>\n\n                    <div className=\"bundle-info-wrapper\">\n                        <p className=\"bundle-name\">{name}</p>\n                        <span className=\"bundle-count\">{completedCount}/{itemCount}</span>\n                        <div className={`progress-bar material ${completedClass}`}>\n                            <div className=\"cursor\" style={{ width: `${progressPercentage}%` }}></div>\n                        </div>\n                    </div>\n                </div>\n\n                {rewardElement}\n\n                <div\n                    className=\"bundle-items-wrapper custom-scrollbar\"\n\n                    onWheel={this.preventScroll}\n                    onTouchMove={this.preventScroll}\n                >\n                    {\n                        items.map((item, index) => (\n                            <Item item={item} key={index} />\n                        ))\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction buildClassName(name) {\n    name = name.replace(/'/g, \"\");\n    name = name.replace(/,/g, \"\");\n    name = name.replace(/:/g, \"\");\n    name = name.replace(/ /g, \"_\");\n    name = name.replace(/-/g, \"_\");\n\n    return `bg-${name}`;\n}\n\n\nconst mapStateToProps = (state, ownProps) => {\n\n    let completeCount = 0;\n    ownProps.bundle.items.forEach(element => {\n        if (state.itemReducer[element.id]) {\n            completeCount++;\n        }\n    });\n\n    let status = false;\n    if (completeCount >= ownProps.bundle.itemCount) {\n        status = true;\n    }\n\n    return {\n        isComplete: status,\n        completedCount: completeCount\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAll: (options) => {\n            dispatch({\n                type: \"TOGGLE_ALL\",\n                payload: options\n            });\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bundle);","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\n\nimport Carousel from './components/Carousel';\nimport Room from './components/Room';\nimport Bundle from './components/Bundle';\n\nimport './css/main.css';\nimport roomsData from './rooms.json';\n\nexport class Main extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentRoom: 0\n        }\n    }\n\n    changeRoom = (newIndex) => {\n        this.setState({ currentRoom: newIndex });\n    }\n\n    render() {\n        const { rooms } = roomsData;\n\n        let roomsElement;\n        if (this.props.sortBy === \"rooms\") {\n            roomsElement = rooms.map((room, index) =>\n                <Room room={room} key={index} />\n            )\n        }\n\n        let bundlesElement;\n        bundlesElement = rooms[this.state.currentRoom].bundles.map((bundle, index) =>\n            <Bundle bundle={bundle} key={index} />\n        )\n\n        return (\n            <div className=\"main\">\n                <div className=\"carousel-container rooms-carousel\">\n                    <Carousel updateState={this.changeRoom}>\n                        {roomsElement}\n                    </Carousel>\n                </div>\n\n                <div className=\"carousel-container bundles-carousel\">\n                    <Carousel currentRoom={this.state.currentRoom}>\n                        {bundlesElement}\n                    </Carousel>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        sortBy: state.wrapperReducer.sortBy\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        /* toggleItem: (id) => {\n            dispatch({\n                type: \"TOGGLE_ITEM\",\n                payload: id\n            });\n        } */\n    };\n};\n\n/* export default Main */\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport Main from './Main';\n\nimport { createStore, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport throttle from 'lodash.throttle';\n\nconst initialState = loadData();\n\nconst wrapperReducer = (state = initialState.wrapperReducer, action) => {\n    switch (action.type) {\n        /* case \"SET_NAME\":\n            state = {\n                ...state,\n                name: action.payload\n            };\n            break;\n        case \"SET_AGE\":\n            state = {\n                ...state,\n                age: action.payload\n            };\n            break; */\n    }\n    return state;\n};\n\nconst itemReducer = (state = initialState.itemReducer, action) => {\n    switch (action.type) {\n        case \"TOGGLE_ITEM\":\n            if (state[action.payload]) {\n                delete state[action.payload];\n                state = {\n                    ...state\n                }\n            } else {\n                state[action.payload] = true;\n                state = {\n                    ...state\n                }\n            }\n\n            break;\n\n        case \"TOGGLE_ALL\":\n            if (!action.payload.allCompleted) {\n\n                action.payload.idArray.forEach(element => {\n                    state[element] = true;\n                    state = {\n                        ...state\n                    }\n                });\n\n            } else {\n                action.payload.idArray.forEach(element => {\n                    delete state[element];\n                    state = {\n                        ...state\n                    }\n                });\n            }\n\n            break;\n    }\n\n    return state;\n};\n\nfunction saveData(state) {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', serializedState);\n    } catch {\n        // ignore write errors\n    }\n}\n\nfunction loadData() {\n    let defaultState = {\n        itemReducer: {},\n        wrapperReducer : {\n            sortBy: \"rooms\"\n        }\n    }\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) {\n            return defaultState;\n        }\n        \n        return JSON.parse(serializedState);\n    } catch (err) {\n        return defaultState;\n    }\n}\n\nconst store = createStore(combineReducers({ wrapperReducer, itemReducer }));\n\nstore.subscribe(throttle(() => {\n    saveData(store.getState());\n}, 1000));\n\nReactDOM.render(\n    <Provider store={store}>\n        <Main />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}