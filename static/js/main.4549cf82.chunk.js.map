{"version":3,"sources":["components/Item.js","components/Bundle.js","components/Room.js","index.js","Main.js"],"names":["Item","infoElement","completedElement","this","props","item","name","info","id","itemClass","replace","buildClassName","className","active","onClick","toggleItem","Component","connect","state","ownProps","itemReducer","dispatch","type","payload","Bundle","bundle","completedCount","idArray","items","forEach","element","push","length","toggleAll","allCompleted","rewardElement","reward","itemCount","isComplete","map","index","key","completeCount","status","options","Room","room","bundles","bundlesCompleted","isBundleComplete","Main","wrapper","sortBy","roomsData","rooms","wrapperReducer","initialState","initialItemState","i","store","createStore","combineReducers","action","subscribe","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"o3gBAMaA,G,YAAb,uKACc,IAKFC,EAKAC,EAVC,SACsBC,KAAKC,MAAMC,KAA9BC,EADH,EACGA,KAAMC,EADT,EACSA,KAAMC,EADf,EACeA,GAEhBC,EAyCZ,SAAwBH,GAKpB,OAFAA,GADAA,GADAA,EAAOA,EAAKI,QAAQ,KAAM,KACdA,QAAQ,KAAM,KACdA,QAAQ,KAAM,KAEpB,MAAN,OAAaJ,GA9COK,CAAeL,GAY/B,OATIC,IACAN,EAAc,yBAAKW,UAAU,eAAeL,IAI5CJ,KAAKC,MAAMS,SACXX,EAAmB,oCAInB,yBAAKU,UAAU,OAAOE,QAAS,kBAAM,EAAKV,MAAMW,WAAWP,KACtDN,EACD,yBAAKU,UAAS,iBAAYH,KAC1B,8BAAOH,EAAP,MAAgBE,EAAhB,MACCP,OArBjB,GAA0Be,cAqDXC,mBA1BS,SAACC,EAAOC,GAE5B,MAAO,CACHN,OAAQK,EAAME,YAAYD,EAASd,KAAKG,QAIhD,SAA4Ba,GACxB,MAAO,CACHN,WAAY,SAACP,GACTa,EAAS,CACLC,KAAM,cACNC,QAASf,QAcVS,CAA6CjB,GCrD/CwB,G,MAAb,0KAEiB,IAAD,EAE2BrB,KAAKC,MAAhCqB,EAFA,EAEAA,OAAQC,EAFR,EAEQA,eAEZC,EAAU,GAEdF,EAAOG,MAAMC,SAAQ,SAAAC,GACjBH,EAAQI,KAAKD,EAAQtB,OAGrBiB,EAAOG,MAAMI,SAAWN,EACxBvB,KAAKC,MAAM6B,UAAU,CAAEN,UAASO,cAAc,IAE9C/B,KAAKC,MAAM6B,UAAU,CAAEN,UAASO,cAAc,MAf1D,+BAoBc,IAGFC,EAKAjC,EARC,SAC2BC,KAAKC,MAAMqB,OAAnCnB,EADH,EACGA,KAAM8B,EADT,EACSA,OAAQR,EADjB,EACiBA,MAYtB,OATIQ,IACAD,EAAgB,mDAAsBC,EAAO9B,KAA7B,KAAqC8B,EAAOC,UAA5C,OAIhBlC,KAAKC,MAAMkC,aACXpC,EAAmB,yDAInB,6BACI,4BAAQY,QAAS,kBAAM,EAAKmB,cAA5B,cACC/B,EACD,iDAAoBI,GACnB6B,EAGGP,EAAMW,KAAI,SAAClC,EAAMmC,GAAP,OACN,kBAAC,EAAD,CAAMnC,KAAMA,EAAMoC,IAAKD,OARnC,SAlCZ,GAA4BxB,cAkFbC,mBA/BS,SAACC,EAAOC,GAE5B,IAAIuB,EAAgB,EACpBvB,EAASM,OAAOG,MAAMC,SAAQ,SAAAC,GACtBZ,EAAME,YAAYU,EAAQtB,KAC1BkC,OAIR,IAAIC,GAAS,EAKb,OAJID,GAAiBvB,EAASM,OAAOY,YACjCM,GAAS,GAGN,CACHL,WAAYK,EACZjB,eAAgBgB,MAIxB,SAA4BrB,GACxB,MAAO,CACHY,UAAW,SAACW,GACRvB,EAAS,CACLC,KAAM,aACNC,QAASqB,QAMV3B,CAA6CO,GClF/CqB,G,MAAb,uKACc,IAIF3C,EAJC,EACkCC,KAAKC,MAApCkC,EADH,EACGA,WAAYZ,EADf,EACeA,eADf,EAE6BvB,KAAKC,MAAM0C,KAArCxC,EAFH,EAEGA,KAAM8B,EAFT,EAESA,OAAQW,EAFjB,EAEiBA,QAOtB,OAJIT,IACApC,EAAmB,sDAInB,6BACI,2BAAIA,EAAJ,cAAiCI,EAAjC,eAAmDoB,EAAnD,IAAoEqB,EAAQf,QAC5E,2CAAiBI,GAGbW,EAAQR,KAAI,SAACd,EAAQe,GAAT,OACR,kBAAC,EAAD,CAAQf,OAAQA,EAAQgB,IAAKD,OAGrC,6BAAS,6BAAS,6BAAS,6BAAS,6BAAS,6BAAS,kCApBtE,GAA0BxB,cC2B1B,ID+CeC,mBAhDS,SAACC,EAAOC,GAE5B,IAAI6B,EAAmB,EACvB7B,EAAS2B,KAAKC,QAAQlB,SAAQ,SAAAC,IA4BlC,SAA0BL,EAAQP,GAE9B,IAAIQ,EAAiB,EAQrB,OAPAD,EAAOG,MAAMC,SAAQ,SAAAC,GACbZ,EAAME,YAAYU,EAAQtB,KAC1BkB,OAKJA,GAAkBD,EAAOY,WArCrBY,CAAiBnB,EAASZ,IAC1B8B,OAIR,IAAIL,GAAS,EAKb,OAJIK,IAAqB7B,EAAS2B,KAAKC,QAAQf,SAC3CW,GAAS,GAGN,CACHL,WAAYK,EACZjB,eAAgBsB,MAIxB,SAA4B3B,GACxB,MAAO,KA2BIJ,CAA6C4B,G,gBExE/CK,EAAb,uKAGQ,IAAIC,EAOJ,MAN0B,UAAtBhD,KAAKC,MAAMgD,SACXD,EAAUE,EAAUC,MAAMf,KAAI,SAACO,EAAMN,GAAP,OAC1B,kBAAC,EAAD,CAAMM,KAAMA,EAAML,IAAKD,QAK3B,yBAAK5B,UAAU,QACVuC,OAZjB,GAA0BnC,aAoCXC,eAlBS,SAACC,GACrB,MAAO,CACHkC,OAAQlC,EAAMqC,eAAeH,WAIV,SAAC/B,GACxB,MAAO,KAWIJ,CAA6CiC,G,ODnCtDM,EAAe,CACjBJ,OAAQ,SAqBRK,EAAmB,GAEdC,EAAI,EAAGA,GAAK,IAAKA,KAI1B,IA0CMC,EAAQC,YAAYC,YAAgB,CAAEN,eAlErB,WAAmC,IAAlCrC,EAAiC,uDAAzBsC,EAAcM,EAAW,uCAerD,OAdQA,EAAOxC,KAcRJ,GAmDiDE,YA1CxC,WAAuC,IAAtCF,EAAqC,uDAA7BuC,EAAkBK,EAAW,uCACtD,OAAQA,EAAOxC,MACX,IAAK,cACGJ,EAAM4C,EAAOvC,iBACNL,EAAM4C,EAAOvC,SACpBL,EAAK,eACEA,KAGPA,EAAM4C,EAAOvC,UAAW,EACxBL,EAAK,eACEA,IAIX,MAEJ,IAAK,aACI4C,EAAOvC,QAAQW,aAUhB4B,EAAOvC,QAAQI,QAAQE,SAAQ,SAAAC,UACpBZ,EAAMY,GACbZ,EAAK,eACEA,MAXX4C,EAAOvC,QAAQI,QAAQE,SAAQ,SAAAC,GAC3BZ,EAAMY,IAAW,EACjBZ,EAAK,eACEA,MAgBvB,OAAOA,MAKXyC,EAAMI,WAAU,eAKhBC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,EAAD,QAGRQ,SAASC,eAAe,W","file":"static/js/main.4549cf82.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\n\nimport '../css/item.css';\nimport '../css/spritesheet.css';\n\nexport class Item extends Component {\n    render() {\n        const { name, info, id } = this.props.item;\n\n        let itemClass = buildClassName(name);\n\n        let infoElement;\n        if (info) {\n            infoElement = <div className=\"info smooth\">{info}</div>;\n        }\n\n        let completedElement;\n        if (this.props.active) {\n            completedElement = <span>X</span>\n        }\n        \n        return (\n            <div className=\"item\" onClick={() => this.props.toggleItem(id)}>\n                {completedElement}\n                <div className={`sprite ${itemClass}`}></div>\n                <span>{name} (({id}))</span>\n                {infoElement}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\n    return {\n        active: state.itemReducer[ownProps.item.id]\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleItem: (id) => {\n            dispatch({\n                type: \"TOGGLE_ITEM\",\n                payload: id\n            });\n        }\n    };\n};\n\nfunction buildClassName(name) {\n    name = name.replace(/'/g, \"\");\n    name = name.replace(/,/g, \"\");\n    name = name.replace(/ /g, \"_\");\n\n    return `bg-${name}`;\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);","import React, { Component } from 'react'\nimport Item from './Item';\nimport { connect } from \"react-redux\";\n\nimport '../css/bundle.css';\n\nexport class Bundle extends Component {\n\n    toggleAll() {\n\n        const { bundle, completedCount } = this.props;\n\n        let idArray = [];\n\n        bundle.items.forEach(element => {\n            idArray.push(element.id);\n        });\n\n        if (bundle.items.length === completedCount) {\n            this.props.toggleAll({ idArray, allCompleted: true });\n        } else {\n            this.props.toggleAll({ idArray, allCompleted: false });\n        }\n\n    }\n\n    render() {\n        const { name, reward, items } = this.props.bundle;\n\n        let rewardElement;\n        if (reward) {\n            rewardElement = <p>-->Bundle reward: {reward.name} ({reward.itemCount}x)</p>\n        }\n\n        let completedElement;\n        if (this.props.isComplete) {\n            completedElement = <span>(((COMPLETED BUNDLE)))</span>;\n        }\n\n        return (\n            <div>\n                <button onClick={() => this.toggleAll()}>TOGGLE ALL</button>\n                {completedElement}\n                <p>-->Bundle name: {name}</p>\n                {rewardElement}\n\n                {\n                    items.map((item, index) => (\n                        <Item item={item} key={index} />\n                    ))\n                }\n                a\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\n    let completeCount = 0;\n    ownProps.bundle.items.forEach(element => {\n        if (state.itemReducer[element.id]) {\n            completeCount++;\n        }\n    });\n\n    let status = false;\n    if (completeCount >= ownProps.bundle.itemCount) {\n        status = true;\n    }\n\n    return {\n        isComplete: status,\n        completedCount: completeCount\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAll: (options) => {\n            dispatch({\n                type: \"TOGGLE_ALL\",\n                payload: options\n            });\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bundle);","import React, { Component } from 'react'\nimport Bundle from './Bundle';\nimport { connect } from \"react-redux\";\n\nimport '../css/room.css';\n\nexport class Room extends Component {\n    render() {\n        const { isComplete, completedCount } = this.props;\n        const { name, reward, bundles } = this.props.room;\n\n        let completedElement;\n        if (isComplete) {\n            completedElement = <span>XXXX CoMpLeTeD RoOm</span>\n        }\n\n        return (\n            <div>\n                <p>{completedElement}Room name: {name}    *****   {completedCount}/{bundles.length}</p>\n                <p>Room reward: {reward}</p>\n\n                {\n                    bundles.map((bundle, index) => (\n                        <Bundle bundle={bundle} key={index} />\n                    ))\n                }\n                <br></br><br></br><br></br><br></br><br></br><br></br><br></br>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\n    let bundlesCompleted = 0;\n    ownProps.room.bundles.forEach(element => {\n        if (isBundleComplete(element, state)) {\n            bundlesCompleted++;\n        }\n    });\n\n    let status = false;\n    if (bundlesCompleted === ownProps.room.bundles.length) {\n        status = true;\n    }\n\n    return {\n        isComplete: status,\n        completedCount: bundlesCompleted\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        /* toggleAll: (options) => {\n            dispatch({\n                type: \"TOGGLE_ALL\",\n                payload: options\n            });\n        } */\n    };\n};\n\nfunction isBundleComplete(bundle, state) {\n\n    let completedCount = 0;\n    bundle.items.forEach(element => {\n        if (state.itemReducer[element.id]) {\n            completedCount++;\n        }\n    });\n\n\n    if (completedCount >= bundle.itemCount) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Room);","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport Main from './Main';\n\nimport { createStore, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nconst initialState = {\n    sortBy: 'rooms'\n}\n\nconst wrapperReducer = (state = initialState, action) => {\n    switch (action.type) {\n        /* case \"SET_NAME\":\n            state = {\n                ...state,\n                name: action.payload\n            };\n            break;\n        case \"SET_AGE\":\n            state = {\n                ...state,\n                age: action.payload\n            };\n            break; */\n    }\n    return state;\n};\n\nvar initialItemState = {};\n\nfor (let i = 0; i <= 133; i++) {\n    /* initialItemState[i] = true; */\n}\n\nconst itemReducer = (state = initialItemState, action) => {\n    switch (action.type) {\n        case \"TOGGLE_ITEM\":\n            if (state[action.payload]) {\n                delete state[action.payload];\n                state = {\n                    ...state\n                }\n            } else {\n                state[action.payload] = true;\n                state = {\n                    ...state\n                }\n            }\n\n            break;\n\n        case \"TOGGLE_ALL\":\n            if (!action.payload.allCompleted) {\n\n                action.payload.idArray.forEach(element => {\n                    state[element] = true;\n                    state = {\n                        ...state\n                    }\n                });\n\n            } else {\n                action.payload.idArray.forEach(element => {\n                    delete state[element];\n                    state = {\n                        ...state\n                    }\n                });\n            }\n\n            break;\n    }\n\n    return state;\n};\n\nconst store = createStore(combineReducers({ wrapperReducer, itemReducer }));\n\nstore.subscribe(() => {\n    /* console.log(store.getState()); */\n\n})\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <Main />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\n\nimport Room from './components/Room';\n\nimport './css/main.css';\nimport roomsData from './rooms.json';\n\nexport class Main extends Component {\n    render() {\n\n        let wrapper;\n        if (this.props.sortBy === \"rooms\") {\n            wrapper = roomsData.rooms.map((room, index) =>\n                <Room room={room} key={index} />\n            )\n        }\n\n        return (\n            <div className=\"main\">\n                {wrapper}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        sortBy: state.wrapperReducer.sortBy\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        /* toggleItem: (id) => {\n            dispatch({\n                type: \"TOGGLE_ITEM\",\n                payload: id\n            });\n        } */\n    };\n};\n\n/* export default Main */\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n"],"sourceRoot":""}