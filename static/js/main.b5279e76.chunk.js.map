{"version":3,"sources":["components/Carousel.js","components/Room.js","components/Item.js","components/Bundle.js","Main.js","index.js"],"names":["Carousel","props","state","positionX","index","mainRef","React","createRef","sliderRef","dragStart","bind","dragging","dragStop","onWheel","prevProps","currentRoom","this","setIndex","event","current","style","transition","cursor","pageX","touches","setState","isMousePressed","initialX","currentX","changedTouches","distance","elementSize","offsetWidth","Math","abs","newIndex","sign","deltaY","childrenCount","children","length","updateState","ref","className","onMouseDown","onMouseMove","onMouseUp","onMouseOut","onTouchStart","onTouchMove","onTouchEnd","transform","Component","Room","isComplete","completedCount","room","name","reward","bundles","progressPercentage","ceil","console","log","width","connect","ownProps","bundlesCompleted","forEach","element","bundle","items","itemReducer","id","itemCount","isBundleComplete","status","dispatch","Item","infoElement","completedElement","item","info","itemClass","replace","buildClassName","active","onClick","toggleItem","type","payload","Bundle","idArray","push","toggleAll","allCompleted","rewardElement","map","key","completeCount","options","Main","changeRoom","roomsElement","bundlesElement","rooms","roomsData","sortBy","wrapperReducer","initialState","defaultState","serializedState","localStorage","getItem","JSON","parse","err","loadData","store","createStore","combineReducers","action","subscribe","throttle","stringify","setItem","saveData","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5279e76.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport '../css/carousel.css';\n\nexport class Carousel extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            positionX: 0,\n            index: 0\n        }\n\n        this.mainRef = React.createRef();\n        this.sliderRef = React.createRef();\n\n        this.dragStart = this.dragStart.bind(this);\n        this.dragging = this.dragging.bind(this);\n        this.dragStop = this.dragStop.bind(this);\n        this.onWheel = this.onWheel.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        const { currentRoom } = this.props;\n\n        if(currentRoom && (currentRoom !== prevProps.currentRoom)) {\n            this.setIndex(0);            \n        }\n    }\n\n    dragStart(event) {\n        this.sliderRef.current.style.transition = \"\";\n        this.sliderRef.current.style.cursor = \"grabbing\";\n\n        const { pageX } = (event.touches && event.touches[0]) || event;\n        this.setState({\n            isMousePressed: true,\n            initialX: pageX,\n            currentX: pageX\n        })\n    }\n\n    dragging(event) {\n        const { pageX } = (event.touches && event.touches[0]) || event;\n        if (this.state.isMousePressed) {\n            this.setState({\n                currentX: pageX,\n                positionX: this.state.positionX + (pageX - this.state.currentX),\n            })\n        }\n    }\n\n    dragStop(event) {\n        if (this.state.isMousePressed) {\n            this.sliderRef.current.style.cursor = \"\";\n\n            this.setState({\n                isMousePressed: false\n            })\n\n            const { pageX } = (event.changedTouches && event.changedTouches[0]) || event;\n            let distance = this.state.initialX - pageX;\n            let elementSize = this.mainRef.current.offsetWidth;\n\n            /* pushy enough */            \n            if (Math.abs(distance) > 120) {\n                let newIndex = this.state.index + ((Math.sign(distance)));\n\n                this.setIndex(newIndex);\n            } else {\n                this.setState({ positionX: elementSize * this.state.index * - 1 });\n            }\n        }\n    }\n\n    onWheel(event) {\n        const { deltaY } = event;\n\n        let newIndex;\n        if (deltaY > 0) {\n            newIndex = this.state.index + 1;\n        } else {\n            newIndex = this.state.index - 1;\n        }\n\n        this.setIndex(newIndex);\n    }\n\n    setIndex(newIndex) {\n        let childrenCount = this.props.children.length || 1;\n        let elementSize = this.mainRef.current.offsetWidth;\n\n        this.sliderRef.current.style.transition = \"transform 0.2s ease-out\"\n        if (newIndex >= 0 && newIndex < childrenCount) {\n            this.setState({\n                index: newIndex,\n                positionX: elementSize * newIndex * - 1\n            });\n            \n            if(this.props.updateState) {\n                this.props.updateState(newIndex);\n            }\n            \n        } else {\n            this.setState({ positionX: elementSize * this.state.index * - 1 });\n        }\n    }\n\n    render() {        \n        return (\n            <div ref={this.mainRef} className=\"carousel-wrapper\"\n\n                onMouseDown={this.dragStart}\n                onMouseMove={this.dragging}\n                onMouseUp={this.dragStop}\n                onMouseOut={this.dragStop}\n                onWheel={this.onWheel}\n\n                onTouchStart={this.dragStart}\n                onTouchMove={this.dragging}\n                onTouchEnd={this.dragStop}\n            >\n\n                <div ref={this.sliderRef} className=\"item-wrapper\" style={{ transform: `translateX(${this.state.positionX}px)` }}>\n                    {this.props.children}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Carousel\n","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\n\nimport '../css/room.css';\n\nexport class Room extends Component {\n    render() {\n        const { isComplete, completedCount } = this.props;\n        const { name, reward, bundles } = this.props.room;\n\n        let completedElement;\n        if (isComplete) {\n            completedElement = <span>XXXX CoMpLeTeD RoOm</span>\n        }\n        let progressPercentage = Math.ceil(completedCount/bundles.length * 100);\n\n        console.log(progressPercentage);\n        \n        return (            \n            <div className=\"room-item material\">\n                <div className=\"room-progress\">\n                    <div className=\"progress-text\">\n                        <p className=\"room-name\">{name}</p>\n                        <span className=\"room-count\">{completedCount}/{bundles.length}</span>\n                    </div>\n                    <div className=\"progress-bar material\">\n                        <div className=\"cursor\" style={{ width: `${progressPercentage}%` }}></div>\n                    </div>\n                </div>\n\n                <div className=\"room-reward-wrapper\">\n                    <span className=\"room-reward-name\">{reward}</span>\n                    <div className=\"sprite bg-Bundle_Reward\"></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\n    let bundlesCompleted = 0;\n    ownProps.room.bundles.forEach(element => {\n        if (isBundleComplete(element, state)) {\n            bundlesCompleted++;\n        }\n    });\n\n    let status = false;\n    if (bundlesCompleted === ownProps.room.bundles.length) {\n        status = true;\n    }\n\n    return {\n        isComplete: status,\n        completedCount: bundlesCompleted\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        /* toggleAll: (options) => {\n            dispatch({\n                type: \"TOGGLE_ALL\",\n                payload: options\n            });\n        } */\n    };\n};\n\nfunction isBundleComplete(bundle, state) {\n\n    let completedCount = 0;\n    bundle.items.forEach(element => {\n        if (state.itemReducer[element.id]) {\n            completedCount++;\n        }\n    });\n\n\n    if (completedCount >= bundle.itemCount) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Room);","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\n\nimport '../css/item.css';\nimport '../css/spritesheet.css';\n\nexport class Item extends Component {\n    render() {\n        const { name, info, id } = this.props.item;\n\n        let itemClass = buildClassName(name);\n\n        let infoElement;\n        if (info) {\n            infoElement = <div className=\"info smooth\">{info}</div>;\n        }\n\n        let completedElement;\n        if (this.props.active) {\n            completedElement = <span>X</span>\n        }\n        \n        return (\n            <div className=\"item\" onClick={() => this.props.toggleItem(id)}>\n                {completedElement}\n                <div className={`sprite ${itemClass}`}></div>\n                <span>{name} (({id}))</span>\n                {infoElement}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\n    return {\n        active: state.itemReducer[ownProps.item.id]\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleItem: (id) => {\n            dispatch({\n                type: \"TOGGLE_ITEM\",\n                payload: id\n            });\n        }\n    };\n};\n\nfunction buildClassName(name) {\n    name = name.replace(/'/g, \"\");\n    name = name.replace(/,/g, \"\");\n    name = name.replace(/ /g, \"_\");\n\n    return `bg-${name}`;\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);","import React, { Component } from 'react'\nimport Item from './Item';\nimport { connect } from \"react-redux\";\n\nimport '../css/bundle.css';\n\nexport class Bundle extends Component {\n\n    toggleAll() {\n\n        const { bundle, completedCount } = this.props;\n\n        let idArray = [];\n\n        bundle.items.forEach(element => {\n            idArray.push(element.id);\n        });\n\n        if (bundle.items.length === completedCount) {\n            this.props.toggleAll({ idArray, allCompleted: true });\n        } else {\n            this.props.toggleAll({ idArray, allCompleted: false });\n        }\n\n    }\n\n    render() {\n        const { name, reward, items } = this.props.bundle;\n\n        let rewardElement;\n        if (reward) {\n            rewardElement = <p>-->Bundle reward: {reward.name} ({reward.itemCount}x)</p>\n        }\n\n        let completedElement;\n        if (this.props.isComplete) {\n            completedElement = <span>(((COMPLETED BUNDLE)))</span>;\n        }\n\n        return (\n            <div className=\"material\">\n                <button onClick={() => this.toggleAll()}>TOGGLE ALL</button>\n                {completedElement}\n                <p>-->Bundle name: {name}</p>\n                {rewardElement}\n\n                {\n                    items.map((item, index) => (\n                        <Item item={item} key={index} />\n                    ))\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\n    let completeCount = 0;\n    ownProps.bundle.items.forEach(element => {\n        if (state.itemReducer[element.id]) {\n            completeCount++;\n        }\n    });\n\n    let status = false;\n    if (completeCount >= ownProps.bundle.itemCount) {\n        status = true;\n    }\n\n    return {\n        isComplete: status,\n        completedCount: completeCount\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAll: (options) => {\n            dispatch({\n                type: \"TOGGLE_ALL\",\n                payload: options\n            });\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bundle);","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\n\nimport Carousel from './components/Carousel';\nimport Room from './components/Room';\nimport Bundle from './components/Bundle';\n\nimport './css/main.css';\nimport roomsData from './rooms.json';\n\nexport class Main extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentRoom: 0\n        }\n    }\n\n    changeRoom = (newIndex) => {\n        this.setState({ currentRoom: newIndex });\n    }\n    \n    render() {\n        const { rooms } = roomsData;\n\n        let roomsElement;\n        if (this.props.sortBy === \"rooms\") {\n            roomsElement = rooms.map((room, index) =>\n                <Room room={room} key={index} />\n            )\n        }\n\n        let bundlesElement;\n        bundlesElement = rooms[this.state.currentRoom].bundles.map((bundle, index) =>\n            <Bundle bundle={bundle} key={index} />\n        )\n\n        return (\n            <div className=\"main\">\n                <div className=\"carousel-container rooms-carousel\">\n                    <Carousel updateState={this.changeRoom}>\n                        {roomsElement}\n                    </Carousel>\n                </div>\n\n                <div className=\"carousel-container bundles-carousel\">\n                    <Carousel currentRoom={this.state.currentRoom}>\n                        {bundlesElement}\n                    </Carousel>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        sortBy: state.wrapperReducer.sortBy\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        /* toggleItem: (id) => {\n            dispatch({\n                type: \"TOGGLE_ITEM\",\n                payload: id\n            });\n        } */\n    };\n};\n\n/* export default Main */\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport Main from './Main';\n\nimport { createStore, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport throttle from 'lodash.throttle';\n\nconst initialState = loadData();\n\nconst wrapperReducer = (state = initialState.wrapperReducer, action) => {\n    switch (action.type) {\n        /* case \"SET_NAME\":\n            state = {\n                ...state,\n                name: action.payload\n            };\n            break;\n        case \"SET_AGE\":\n            state = {\n                ...state,\n                age: action.payload\n            };\n            break; */\n    }\n    return state;\n};\n\nconst itemReducer = (state = initialState.itemReducer, action) => {\n    switch (action.type) {\n        case \"TOGGLE_ITEM\":\n            if (state[action.payload]) {\n                delete state[action.payload];\n                state = {\n                    ...state\n                }\n            } else {\n                state[action.payload] = true;\n                state = {\n                    ...state\n                }\n            }\n\n            break;\n\n        case \"TOGGLE_ALL\":\n            if (!action.payload.allCompleted) {\n\n                action.payload.idArray.forEach(element => {\n                    state[element] = true;\n                    state = {\n                        ...state\n                    }\n                });\n\n            } else {\n                action.payload.idArray.forEach(element => {\n                    delete state[element];\n                    state = {\n                        ...state\n                    }\n                });\n            }\n\n            break;\n    }\n\n    return state;\n};\n\nfunction saveData(state) {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', serializedState);\n    } catch {\n        // ignore write errors\n    }\n}\n\nfunction loadData() {\n    let defaultState = {\n        itemReducer: {},\n        wrapperReducer : {\n            sortBy: \"rooms\"\n        }\n    }\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) {\n            return defaultState;\n        }\n        console.log(JSON.parse(serializedState));\n        \n        return JSON.parse(serializedState);\n    } catch (err) {\n        return defaultState;\n    }\n}\n\nconst store = createStore(combineReducers({ wrapperReducer, itemReducer }));\n\nstore.subscribe(throttle(() => {\n    saveData(store.getState());\n}, 1000));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <Main />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}